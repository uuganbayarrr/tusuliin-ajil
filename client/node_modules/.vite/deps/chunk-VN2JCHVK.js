import {
  require_arrayEach,
  require_baseEach,
  require_baseIsEqual,
  require_get,
  require_identity,
  require_isArray,
  require_isObject,
  require_root,
  require_toNumber
} from "./chunk-6IOJSW6W.js";
import {
  require_prop_types
} from "./chunk-FCQDVHFS.js";
import {
  require_react
} from "./chunk-XP5NK5VO.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-FWVXXLA5.js";

// node_modules/lodash/now.js
var require_now = __commonJS({
  "node_modules/lodash/now.js"(exports, module) {
    var root = require_root();
    var now = function() {
      return root.Date.now();
    };
    module.exports = now;
  }
});

// node_modules/lodash/debounce.js
var require_debounce = __commonJS({
  "node_modules/lodash/debounce.js"(exports, module) {
    var isObject = require_isObject();
    var now = require_now();
    var toNumber = require_toNumber();
    var FUNC_ERROR_TEXT = "Expected a function";
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    module.exports = debounce;
  }
});

// node_modules/lodash/throttle.js
var require_throttle = __commonJS({
  "node_modules/lodash/throttle.js"(exports, module) {
    var debounce = require_debounce();
    var isObject = require_isObject();
    var FUNC_ERROR_TEXT = "Expected a function";
    function throttle2(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    module.exports = throttle2;
  }
});

// node_modules/lodash/_castFunction.js
var require_castFunction = __commonJS({
  "node_modules/lodash/_castFunction.js"(exports, module) {
    var identity = require_identity();
    function castFunction(value) {
      return typeof value == "function" ? value : identity;
    }
    module.exports = castFunction;
  }
});

// node_modules/lodash/forEach.js
var require_forEach = __commonJS({
  "node_modules/lodash/forEach.js"(exports, module) {
    var arrayEach = require_arrayEach();
    var baseEach = require_baseEach();
    var castFunction = require_castFunction();
    var isArray = require_isArray();
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, castFunction(iteratee));
    }
    module.exports = forEach;
  }
});

// node_modules/lodash/each.js
var require_each = __commonJS({
  "node_modules/lodash/each.js"(exports, module) {
    module.exports = require_forEach();
  }
});

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/lodash/isEqual.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }
    module.exports = isEqual;
  }
});

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames() {
        var classes = "";
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (arg) {
            classes = appendClass(classes, parseValue(arg));
          }
        }
        return classes;
      }
      function parseValue(arg) {
        if (typeof arg === "string" || typeof arg === "number") {
          return arg;
        }
        if (typeof arg !== "object") {
          return "";
        }
        if (Array.isArray(arg)) {
          return classNames.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
          return arg.toString();
        }
        var classes = "";
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes = appendClass(classes, key);
          }
        }
        return classes;
      }
      function appendClass(value, newClass) {
        if (!newClass) {
          return value;
        }
        if (value) {
          return value + " " + newClass;
        }
        return value + newClass;
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames;
        });
      } else {
        window.classNames = classNames;
      }
    })();
  }
});

// node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js
var ResizeObserver_es_exports = {};
__export(ResizeObserver_es_exports, {
  default: () => ResizeObserver_es_default
});
function throttle(callback, delay) {
  var leadingCall = false, trailingCall = false, lastCallTime = 0;
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }
    if (trailingCall) {
      proxy();
    }
  }
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  function proxy() {
    var timeStamp = Date.now();
    if (leadingCall) {
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay);
    }
    lastCallTime = timeStamp;
  }
  return proxy;
}
function toFloat(value) {
  return parseFloat(value) || 0;
}
function getBordersSize(styles) {
  var positions = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    positions[_i - 1] = arguments[_i];
  }
  return positions.reduce(function(size, position) {
    var value = styles["border-" + position + "-width"];
    return size + toFloat(value);
  }, 0);
}
function getPaddings(styles) {
  var positions = ["top", "right", "bottom", "left"];
  var paddings = {};
  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
    var position = positions_1[_i];
    var value = styles["padding-" + position];
    paddings[position] = toFloat(value);
  }
  return paddings;
}
function getSVGContentRect(target) {
  var bbox = target.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target) {
  var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles = getWindowOf(target).getComputedStyle(target);
  var paddings = getPaddings(styles);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width = toFloat(styles.width), height = toFloat(styles.height);
  if (styles.boxSizing === "border-box") {
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles, "left", "right") + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles, "top", "bottom") + vertPad;
    }
  }
  if (!isDocumentElement(target)) {
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
function isDocumentElement(target) {
  return target === getWindowOf(target).document.documentElement;
}
function getContentRect(target) {
  if (!isBrowser) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target)) {
    return getSVGContentRect(target);
  }
  return getHTMLElementContentRect(target);
}
function createReadOnlyRect(_a) {
  var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
  var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  defineConfigurable(rect, {
    x,
    y,
    width,
    height,
    top: y,
    right: x + width,
    bottom: height + y,
    left: x
  });
  return rect;
}
function createRectInit(x, y, width, height) {
  return { x, y, width, height };
}
var MapShim, isBrowser, global$1, requestAnimationFrame$1, trailingTimeout, REFRESH_DELAY, transitionKeys, mutationObserverSupported, ResizeObserverController, defineConfigurable, getWindowOf, emptyRect, isSVGGraphicsElement, ResizeObservation, ResizeObserverEntry, ResizeObserverSPI, observers, ResizeObserver, index, ResizeObserver_es_default;
var init_ResizeObserver_es = __esm({
  "node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"() {
    MapShim = function() {
      if (typeof Map !== "undefined") {
        return Map;
      }
      function getIndex(arr, key) {
        var result = -1;
        arr.some(function(entry, index2) {
          if (entry[0] === key) {
            result = index2;
            return true;
          }
          return false;
        });
        return result;
      }
      return (
        /** @class */
        function() {
          function class_1() {
            this.__entries__ = [];
          }
          Object.defineProperty(class_1.prototype, "size", {
            /**
             * @returns {boolean}
             */
            get: function() {
              return this.__entries__.length;
            },
            enumerable: true,
            configurable: true
          });
          class_1.prototype.get = function(key) {
            var index2 = getIndex(this.__entries__, key);
            var entry = this.__entries__[index2];
            return entry && entry[1];
          };
          class_1.prototype.set = function(key, value) {
            var index2 = getIndex(this.__entries__, key);
            if (~index2) {
              this.__entries__[index2][1] = value;
            } else {
              this.__entries__.push([key, value]);
            }
          };
          class_1.prototype.delete = function(key) {
            var entries = this.__entries__;
            var index2 = getIndex(entries, key);
            if (~index2) {
              entries.splice(index2, 1);
            }
          };
          class_1.prototype.has = function(key) {
            return !!~getIndex(this.__entries__, key);
          };
          class_1.prototype.clear = function() {
            this.__entries__.splice(0);
          };
          class_1.prototype.forEach = function(callback, ctx) {
            if (ctx === void 0) {
              ctx = null;
            }
            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
              var entry = _a[_i];
              callback.call(ctx, entry[1], entry[0]);
            }
          };
          return class_1;
        }()
      );
    }();
    isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
    global$1 = function() {
      if (typeof global !== "undefined" && global.Math === Math) {
        return global;
      }
      if (typeof self !== "undefined" && self.Math === Math) {
        return self;
      }
      if (typeof window !== "undefined" && window.Math === Math) {
        return window;
      }
      return Function("return this")();
    }();
    requestAnimationFrame$1 = function() {
      if (typeof requestAnimationFrame === "function") {
        return requestAnimationFrame.bind(global$1);
      }
      return function(callback) {
        return setTimeout(function() {
          return callback(Date.now());
        }, 1e3 / 60);
      };
    }();
    trailingTimeout = 2;
    REFRESH_DELAY = 20;
    transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
    mutationObserverSupported = typeof MutationObserver !== "undefined";
    ResizeObserverController = /** @class */
    function() {
      function ResizeObserverController2() {
        this.connected_ = false;
        this.mutationEventsAdded_ = false;
        this.mutationsObserver_ = null;
        this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
      }
      ResizeObserverController2.prototype.addObserver = function(observer) {
        if (!~this.observers_.indexOf(observer)) {
          this.observers_.push(observer);
        }
        if (!this.connected_) {
          this.connect_();
        }
      };
      ResizeObserverController2.prototype.removeObserver = function(observer) {
        var observers2 = this.observers_;
        var index2 = observers2.indexOf(observer);
        if (~index2) {
          observers2.splice(index2, 1);
        }
        if (!observers2.length && this.connected_) {
          this.disconnect_();
        }
      };
      ResizeObserverController2.prototype.refresh = function() {
        var changesDetected = this.updateObservers_();
        if (changesDetected) {
          this.refresh();
        }
      };
      ResizeObserverController2.prototype.updateObservers_ = function() {
        var activeObservers = this.observers_.filter(function(observer) {
          return observer.gatherActive(), observer.hasActive();
        });
        activeObservers.forEach(function(observer) {
          return observer.broadcastActive();
        });
        return activeObservers.length > 0;
      };
      ResizeObserverController2.prototype.connect_ = function() {
        if (!isBrowser || this.connected_) {
          return;
        }
        document.addEventListener("transitionend", this.onTransitionEnd_);
        window.addEventListener("resize", this.refresh);
        if (mutationObserverSupported) {
          this.mutationsObserver_ = new MutationObserver(this.refresh);
          this.mutationsObserver_.observe(document, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true
          });
        } else {
          document.addEventListener("DOMSubtreeModified", this.refresh);
          this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
      };
      ResizeObserverController2.prototype.disconnect_ = function() {
        if (!isBrowser || !this.connected_) {
          return;
        }
        document.removeEventListener("transitionend", this.onTransitionEnd_);
        window.removeEventListener("resize", this.refresh);
        if (this.mutationsObserver_) {
          this.mutationsObserver_.disconnect();
        }
        if (this.mutationEventsAdded_) {
          document.removeEventListener("DOMSubtreeModified", this.refresh);
        }
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
      };
      ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
        var isReflowProperty = transitionKeys.some(function(key) {
          return !!~propertyName.indexOf(key);
        });
        if (isReflowProperty) {
          this.refresh();
        }
      };
      ResizeObserverController2.getInstance = function() {
        if (!this.instance_) {
          this.instance_ = new ResizeObserverController2();
        }
        return this.instance_;
      };
      ResizeObserverController2.instance_ = null;
      return ResizeObserverController2;
    }();
    defineConfigurable = function(target, props) {
      for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
        var key = _a[_i];
        Object.defineProperty(target, key, {
          value: props[key],
          enumerable: false,
          writable: false,
          configurable: true
        });
      }
      return target;
    };
    getWindowOf = function(target) {
      var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
      return ownerGlobal || global$1;
    };
    emptyRect = createRectInit(0, 0, 0, 0);
    isSVGGraphicsElement = function() {
      if (typeof SVGGraphicsElement !== "undefined") {
        return function(target) {
          return target instanceof getWindowOf(target).SVGGraphicsElement;
        };
      }
      return function(target) {
        return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
      };
    }();
    ResizeObservation = /** @class */
    function() {
      function ResizeObservation2(target) {
        this.broadcastWidth = 0;
        this.broadcastHeight = 0;
        this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
      }
      ResizeObservation2.prototype.isActive = function() {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
      };
      ResizeObservation2.prototype.broadcastRect = function() {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
      };
      return ResizeObservation2;
    }();
    ResizeObserverEntry = /** @class */
    function() {
      function ResizeObserverEntry2(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        defineConfigurable(this, { target, contentRect });
      }
      return ResizeObserverEntry2;
    }();
    ResizeObserverSPI = /** @class */
    function() {
      function ResizeObserverSPI2(callback, controller, callbackCtx) {
        this.activeObservations_ = [];
        this.observations_ = new MapShim();
        if (typeof callback !== "function") {
          throw new TypeError("The callback provided as parameter 1 is not a function.");
        }
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
      }
      ResizeObserverSPI2.prototype.observe = function(target) {
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        if (typeof Element === "undefined" || !(Element instanceof Object)) {
          return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        if (observations.has(target)) {
          return;
        }
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        this.controller_.refresh();
      };
      ResizeObserverSPI2.prototype.unobserve = function(target) {
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        if (typeof Element === "undefined" || !(Element instanceof Object)) {
          return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        if (!observations.has(target)) {
          return;
        }
        observations.delete(target);
        if (!observations.size) {
          this.controller_.removeObserver(this);
        }
      };
      ResizeObserverSPI2.prototype.disconnect = function() {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
      };
      ResizeObserverSPI2.prototype.gatherActive = function() {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function(observation) {
          if (observation.isActive()) {
            _this.activeObservations_.push(observation);
          }
        });
      };
      ResizeObserverSPI2.prototype.broadcastActive = function() {
        if (!this.hasActive()) {
          return;
        }
        var ctx = this.callbackCtx_;
        var entries = this.activeObservations_.map(function(observation) {
          return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
      };
      ResizeObserverSPI2.prototype.clearActive = function() {
        this.activeObservations_.splice(0);
      };
      ResizeObserverSPI2.prototype.hasActive = function() {
        return this.activeObservations_.length > 0;
      };
      return ResizeObserverSPI2;
    }();
    observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
    ResizeObserver = /** @class */
    function() {
      function ResizeObserver2(callback) {
        if (!(this instanceof ResizeObserver2)) {
          throw new TypeError("Cannot call a class as a function.");
        }
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
      }
      return ResizeObserver2;
    }();
    [
      "observe",
      "unobserve",
      "disconnect"
    ].forEach(function(method) {
      ResizeObserver.prototype[method] = function() {
        var _a;
        return (_a = observers.get(this))[method].apply(_a, arguments);
      };
    });
    index = function() {
      if (typeof global$1.ResizeObserver !== "undefined") {
        return global$1.ResizeObserver;
      }
      return ResizeObserver;
    }();
    ResizeObserver_es_default = index;
  }
});

// node_modules/infinite-react-carousel/lib/carousel/array.js
var require_array = __commonJS({
  "node_modules/infinite-react-carousel/lib/carousel/array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var CircularArray = function() {
      _createClass(CircularArray2, [{
        key: "length",
        get: function get() {
          return this.array.length;
        }
      }]);
      function CircularArray2(n) {
        var _this = this;
        var origin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        _classCallCheck(this, CircularArray2);
        _defineProperty(this, "array", []);
        _defineProperty(this, "key", []);
        _defineProperty(this, "origin", null);
        _defineProperty(this, "toString", function(array) {
          var result = [];
          var newArray = array || _this.array;
          for (var i2 = 0; i2 < newArray.length; i2 += 1) {
            var item = newArray[i2];
            if (_typeof(item) === "object" && item instanceof Array)
              result.push("[".concat(_this.toString(item), "]"));
            else if (_typeof(item) === "object")
              result.push(JSON.stringify(item));
            else
              result.push(item.toString());
          }
          return result.join(",");
        });
        _defineProperty(this, "get", function(i2) {
          var result;
          if (i2 < 0 || i2 < _this.length - _this.array.length) {
            result = _this.array[-i2 % _this.array.length === 0 ? 0 : _this.array.length + i2 % _this.array.length];
          } else {
            result = _this.array[i2 % _this.array.length];
          }
          return result;
        });
        _defineProperty(this, "getKeyIndex", function(i2) {
          var originItem = _this.origin.get(i2);
          var carouselkey = originItem.dataset.carouselkey;
          return _this.key.indexOf(carouselkey);
        });
        _defineProperty(this, "getIndex", function(i2) {
          var result;
          if (i2 < 0 || i2 < _this.length - _this.array.length) {
            result = -i2 % _this.array.length === 0 ? 0 : _this.array.length + i2 % _this.array.length;
          } else {
            result = i2 % _this.array.length;
          }
          return result;
        });
        _defineProperty(this, "set", function(i2, v) {
          if (i2 < 0 || i2 < _this.length - _this.array.length) {
            throw new Error("can not set index < 0");
          }
          if (i2 >= _this.length) {
            var newArr = new Array(i2 - _this.length + 1);
            _this.array = _this.array.concat(newArr);
            _this.array.splice(i2, 1, v);
          } else {
            _this.array[_this.getIndex(i2)] = v;
          }
        });
        this.array = [];
        if (typeof n === "number") {
          this.array = new Array(n);
        } else if (_typeof(n) === "object" && Array.isArray(n)) {
          this.array = n;
        } else if (_typeof(n) === "object" && n.length > 0 && n instanceof NodeList) {
          for (var i = 0; i < n.length; i += 1) {
            this.array.push(n[i]);
          }
          this.key = this.array.map(function(item) {
            var carouselkey = item.dataset.carouselkey;
            return carouselkey;
          });
        } else {
          throw new Error("can not create array");
        }
        this.origin = origin;
      }
      return CircularArray2;
    }();
    var _default = CircularArray;
    exports["default"] = _default;
  }
});

// node_modules/infinite-react-carousel/lib/carousel/types.js
var require_types = __commonJS({
  "node_modules/infinite-react-carousel/lib/carousel/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.arrowsPropTypes = exports.arrowsDefaultProps = exports.dotsPropTypes = exports.dotsDefaultProps = exports.autoplayProps = exports.propTypes = exports.defaultProps = void 0;
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var autoplayProps = {
      autoplaySpeed: 3e3
    };
    exports.autoplayProps = autoplayProps;
    var defaultProps = {
      accessibility: true,
      //
      adaptiveHeight: false,
      //
      afterChange: null,
      //
      appendDots: function appendDots(dots) {
        return _react["default"].createElement("ul", {
          style: {
            display: "block"
          }
        }, dots);
      },
      //
      arrows: true,
      //
      autoplay: false,
      //
      autoplaySpeed: 3e3,
      //
      beforeChange: null,
      //
      centerMode: false,
      //
      arrowsScroll: 1,
      //
      centerPadding: 50,
      //
      className: "",
      //
      customPaging: function customPaging(i) {
        return _react["default"].createElement("button", {
          type: "button"
        }, i + 1);
      },
      //
      dots: false,
      //
      dotsClass: "carousel-dots",
      //
      dotsScroll: 1,
      //
      draggable: true,
      edgeFriction: 0.35,
      fade: false,
      focusOnSelect: false,
      initialSlide: false,
      //
      lazyLoad: null,
      nextArrow: null,
      //
      onEdge: null,
      onInit: null,
      //
      onLazyLoadError: null,
      onReInit: null,
      //
      pauseOnDotsHover: false,
      pauseOnFocus: false,
      pauseOnHover: true,
      //
      prevArrow: null,
      //
      responsive: null,
      rows: 1,
      //
      rtl: false,
      slide: "div",
      slidesPerRow: 1,
      //
      slidesToShow: 1,
      //
      swipe: true,
      //
      swipeToSlide: false,
      vertical: false,
      duration: 200,
      //
      shift: 0,
      //
      gutter: 0,
      //
      fullWidth: false,
      //
      arrowsBlock: true,
      //
      autoplayScroll: 1,
      //
      onResize: function onResize() {
      },
      //
      onSwipe: function onSwipe() {
      },
      //
      wheel: false,
      wheelScroll: 1,
      virtualList: false,
      overScan: 2
    };
    exports.defaultProps = defaultProps;
    var propTypes = {
      accessibility: _propTypes["default"].bool,
      adaptiveHeight: _propTypes["default"].bool,
      afterChange: _propTypes["default"].func,
      appendDots: _propTypes["default"].func,
      arrows: _propTypes["default"].bool,
      arrowsScroll: _propTypes["default"].number,
      autoplay: _propTypes["default"].bool,
      autoplaySpeed: _propTypes["default"].number,
      beforeChange: _propTypes["default"].func,
      centerMode: _propTypes["default"].bool,
      centerPadding: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
      className: _propTypes["default"].string,
      cssEase: _propTypes["default"].string,
      customPaging: _propTypes["default"].func,
      dots: _propTypes["default"].bool,
      dotsClass: _propTypes["default"].string,
      dotsScroll: _propTypes["default"].number,
      draggable: _propTypes["default"].bool,
      easing: _propTypes["default"].string,
      edgeFriction: _propTypes["default"].number,
      fade: _propTypes["default"].bool,
      focusOnSelect: _propTypes["default"].bool,
      initialSlide: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].bool]),
      lazyLoad: _propTypes["default"].bool,
      nextArrow: _propTypes["default"].oneOfType([_propTypes["default"].instanceOf(typeof Element !== "undefined" && Element), _propTypes["default"].element]),
      onEdge: _propTypes["default"].func,
      onInit: _propTypes["default"].func,
      onLazyLoadError: _propTypes["default"].func,
      onReInit: _propTypes["default"].func,
      pauseOnDotsHover: _propTypes["default"].bool,
      pauseOnFocus: _propTypes["default"].bool,
      pauseOnHover: _propTypes["default"].bool,
      prevArrow: _propTypes["default"].oneOfType([_propTypes["default"].instanceOf(typeof Element !== "undefined" && Element), _propTypes["default"].element]),
      responsive: _propTypes["default"].array,
      rows: _propTypes["default"].number,
      rtl: _propTypes["default"].bool,
      slide: _propTypes["default"].string,
      slidesPerRow: _propTypes["default"].number,
      slidesToShow: _propTypes["default"].number,
      swipe: _propTypes["default"].bool,
      swipeToSlide: _propTypes["default"].bool,
      vertical: _propTypes["default"].bool,
      duration: _propTypes["default"].number,
      shift: _propTypes["default"].number,
      gutter: _propTypes["default"].number,
      fullWidth: _propTypes["default"].bool,
      arrowsBlock: _propTypes["default"].bool,
      autoplayScroll: _propTypes["default"].number,
      onResize: _propTypes["default"].func,
      onSwipe: _propTypes["default"].func,
      virtualList: _propTypes["default"].bool,
      overScan: _propTypes["default"].number
    };
    exports.propTypes = propTypes;
    var dotsDefaultProps = {
      slideCount: 0,
      dotsScroll: 1,
      slidesToShow: 1,
      infinite: true,
      currentSlide: 0,
      clickHandler: function clickHandler() {
      },
      onMouseEnter: function onMouseEnter() {
      },
      onMouseOver: function onMouseOver() {
      },
      onMouseLeave: function onMouseLeave() {
      },
      customPaging: function customPaging(i) {
        return _react["default"].createElement("button", {
          type: "button"
        }, i + 1);
      },
      appendDots: function appendDots(dots) {
        return _react["default"].createElement("ul", {
          style: {
            display: "block"
          }
        }, dots);
      },
      dotsClass: ""
    };
    exports.dotsDefaultProps = dotsDefaultProps;
    var dotsPropTypes = {
      slideCount: _propTypes["default"].number,
      dotsScroll: _propTypes["default"].number,
      slidesToShow: _propTypes["default"].number,
      infinite: _propTypes["default"].bool,
      currentSlide: _propTypes["default"].number,
      clickHandler: _propTypes["default"].func,
      onMouseEnter: _propTypes["default"].func,
      onMouseOver: _propTypes["default"].func,
      onMouseLeave: _propTypes["default"].func,
      customPaging: _propTypes["default"].func,
      appendDots: _propTypes["default"].func,
      dotsClass: _propTypes["default"].string
    };
    exports.dotsPropTypes = dotsPropTypes;
    var arrowsPropTypes = {
      arrows: _propTypes["default"].bool,
      arrowsScroll: _propTypes["default"].number,
      // currentSlide: PropTypes,
      clickHandler: _propTypes["default"].func,
      // slideCount,
      type: _propTypes["default"].oneOf(["prev", "next"]),
      prevArrow: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].element, _propTypes["default"].instanceOf(typeof Element !== "undefined" && Element), _propTypes["default"].oneOf([null])]),
      nextArrow: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].element, _propTypes["default"].instanceOf(typeof Element !== "undefined" && Element), _propTypes["default"].oneOf([null])]),
      arrowsBlock: _propTypes["default"].bool
    };
    exports.arrowsPropTypes = arrowsPropTypes;
    var arrowsDefaultProps = {
      arrows: true,
      arrowsScroll: 1,
      // currentSlide,
      clickHandler: function clickHandler() {
      },
      // slideCount,
      type: "prev",
      arrowsBlock: true,
      prevArrow: null,
      nextArrow: null
    };
    exports.arrowsDefaultProps = arrowsDefaultProps;
  }
});

// node_modules/infinite-react-carousel/lib/carousel/arrows.js
var require_arrows = __commonJS({
  "node_modules/infinite-react-carousel/lib/carousel/arrows.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NextArrow = exports.PrevArrow = void 0;
    var _react = _interopRequireDefault(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _types = require_types();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var Arrow = function Arrow2(_ref) {
      var arrowsScroll = _ref.arrowsScroll, clickHandler = _ref.clickHandler, type = _ref.type, prevArrow = _ref.prevArrow, nextArrow = _ref.nextArrow, arrowsBlock = _ref.arrowsBlock;
      var ClickHandler = function ClickHandler2(options, e) {
        e.preventDefault();
        clickHandler(options, e);
      };
      var classes = {
        "carousel-arrow": true,
        block: arrowsBlock
      };
      var arrowOptions = {
        arrowsScroll
      };
      if (type === "prev") {
        Object.assign(classes, {
          "carousel-prev": true
        });
        if (prevArrow) {
          Object.assign(classes, {
            custom: true
          });
        }
        Object.assign(arrowOptions, {
          message: "previous"
        });
      } else {
        Object.assign(classes, {
          "carousel-next": true
        });
        if (nextArrow) {
          Object.assign(classes, {
            custom: true
          });
        }
        Object.assign(arrowOptions, {
          message: "next"
        });
      }
      var arrowProps = {
        key: type === "prev" ? "0" : "1",
        "data-role": "none",
        className: (0, _classnames["default"])(classes),
        // style: { display: 'block' },
        onClick: function onClick(e) {
          return ClickHandler(arrowOptions, e);
        }
      };
      var customArrow = null;
      if (prevArrow && type === "prev") {
        customArrow = _react["default"].cloneElement(prevArrow, _objectSpread({}, arrowProps));
      } else if (nextArrow && type === "next") {
        customArrow = _react["default"].cloneElement(nextArrow, _objectSpread({}, arrowProps));
      } else {
        customArrow = _react["default"].createElement("button", _extends({}, arrowProps, {
          key: type === "prev" ? "0" : "1",
          type: "button"
        }), " ", type === "prev" ? "Previous" : "Next");
      }
      return customArrow;
    };
    Arrow.propTypes = _types.arrowsPropTypes;
    Arrow.defaultProps = _types.arrowsDefaultProps;
    var PrevArrow = function PrevArrow2(props) {
      return _react["default"].createElement(Arrow, _extends({
        type: "prev"
      }, props));
    };
    exports.PrevArrow = PrevArrow;
    var NextArrow = function NextArrow2(props) {
      return _react["default"].createElement(Arrow, _extends({
        type: "next"
      }, props));
    };
    exports.NextArrow = NextArrow;
  }
});

// node_modules/infinite-react-carousel/lib/carousel/dots.js
var require_dots = __commonJS({
  "node_modules/infinite-react-carousel/lib/carousel/dots.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireDefault(require_react());
    var _classnames = _interopRequireDefault(require_classnames());
    var _types = require_types();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var getDotCount = function getDotCount2(spec) {
      return Math.ceil(spec.slideCount / spec.dotsScroll);
    };
    var Dots = function Dots2(_ref) {
      var slideCount = _ref.slideCount, dotsScroll = _ref.dotsScroll, slidesToShow = _ref.slidesToShow, infinite = _ref.infinite, activeIndex = _ref.activeIndex, clickHandler = _ref.clickHandler, onMouseEnter = _ref.onMouseEnter, onMouseOver = _ref.onMouseOver, onMouseLeave = _ref.onMouseLeave, customPaging = _ref.customPaging, appendDots = _ref.appendDots, dotsClass = _ref.dotsClass;
      var ClickHandler = function ClickHandler2(options, e) {
        e.preventDefault();
        clickHandler(options);
      };
      var dotCount = getDotCount({
        slideCount,
        dotsScroll,
        slidesToShow,
        infinite
      });
      var dots = Array.apply([], Array(dotCount + 1).join("0").split("")).map(function(x, i) {
        var leftBound = i * dotsScroll;
        var rightBound = i * dotsScroll + (dotsScroll - 1);
        var className = (0, _classnames["default"])({
          "carousel-dots-active": activeIndex >= leftBound && activeIndex <= rightBound
        });
        var dotOptions = {
          message: "dots",
          index: i,
          dotsScroll,
          activeIndex
        };
        return _react["default"].createElement("li", {
          className: "".concat(className, " carousel-dot-").concat(i + 1),
          key: "".concat((/* @__PURE__ */ new Date()).getTime() * i)
        }, _react["default"].cloneElement(customPaging(i), {
          onClick: function onClick(e) {
            return ClickHandler(dotOptions, e);
          }
        }));
      });
      return _react["default"].cloneElement(appendDots(dots), _objectSpread({
        className: dotsClass
      }, {
        onMouseEnter,
        onMouseOver,
        onMouseLeave
      }));
    };
    Dots.defaultProps = _types.dotsDefaultProps;
    Dots.propTypes = _types.dotsPropTypes;
    var _default = Dots;
    exports["default"] = _default;
  }
});

// node_modules/infinite-react-carousel/lib/carousel/utils.js
var require_utils = __commonJS({
  "node_modules/infinite-react-carousel/lib/carousel/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.keyHandler = exports.getSwipeDirection = void 0;
    var getSwipeDirection = function getSwipeDirection2(touchObject) {
      var verticalSwiping = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var xDist = 0;
      var yDist = 0;
      var swipeAngle;
      xDist = touchObject.startX - touchObject.endX;
      yDist = touchObject.startY - touchObject.endY;
      var r = Math.atan2(yDist, xDist);
      swipeAngle = Math.round(r * 180 / Math.PI);
      if (swipeAngle < 0) {
        swipeAngle = 360 - Math.abs(swipeAngle);
      }
      if (swipeAngle <= 45 && swipeAngle >= 0 || swipeAngle <= 360 && swipeAngle >= 315) {
        return "left";
      }
      if (swipeAngle >= 135 && swipeAngle <= 225) {
        return "right";
      }
      if (verticalSwiping === true) {
        if (swipeAngle > 45 && swipeAngle < 135) {
          return "up";
        }
        return "down";
      }
      return "vertical";
    };
    exports.getSwipeDirection = getSwipeDirection;
    var keyHandler = function keyHandler2(e, accessibility, rtl) {
      if (e.target.tagName.match("TEXTAREA|INPUT|SELECT") || !accessibility)
        return "";
      if (e.keyCode === 37)
        return rtl ? "next" : "previous";
      if (e.keyCode === 39)
        return rtl ? "previous" : "next";
      return "";
    };
    exports.keyHandler = keyHandler;
  }
});

// node_modules/infinite-react-carousel/lib/carousel/listener.js
var require_listener = __commonJS({
  "node_modules/infinite-react-carousel/lib/carousel/listener.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.handleCarouselTap = handleCarouselTap;
    exports.handleCarouselDrag = handleCarouselDrag;
    exports.handleCarouselRelease = handleCarouselRelease;
    exports.handleResizeHeight = handleResizeHeight;
    exports.handleClick = handleClick;
    exports.handleAutoplayPause = handleAutoplayPause;
    exports.handleKeyDown = handleKeyDown;
    exports.handleResize = handleResize;
    exports.handleWheel = handleWheel;
    exports.handleVisibilityChange = handleVisibilityChange;
    exports.signupListener = signupListener;
    exports.removeListener = removeListener;
    var _utils = require_utils();
    function handleCarouselTap(e) {
      if (e.type === "mousedown" && e.target.tagName === "IMG") {
        e.preventDefault();
      }
      this.pressed = true;
      this.dragged = false;
      this.verticalDragged = false;
      this.reference = this.xpos(e);
      this.referenceY = this.ypos(e);
      this.touchObject = Object.assign(this.touchObject, {
        startX: this.reference,
        startY: this.referenceY
      });
      this.velocity = 0;
      this.amplitude = 0;
      this.frame = this.offset;
      this.timestamp = Date.now();
      clearInterval(this.ticker);
      this.ticker = setInterval(this.track, 100);
    }
    function handleCarouselDrag(e) {
      if (this.pressed) {
        var x = this.xpos(e);
        var y = this.ypos(e);
        var delta = this.reference - x;
        var deltaY = Math.abs(this.referenceY - y);
        var direction = (0, _utils.getSwipeDirection)(Object.assign(this.touchObject, {
          endX: x,
          endY: y
        }));
        this.scrollType = {
          type: "scroll",
          direction
        };
        if (deltaY < 30 && !this.verticalDragged) {
          if (delta > 2 || delta < -2) {
            this.dragged = true;
            this.reference = x;
            this.scroll("drag", this.offset + delta);
          }
        } else if (this.dragged) {
          e.preventDefault();
          e.stopPropagation();
        } else {
          this.verticalDragged = true;
        }
      }
      if (this.dragged) {
        e.preventDefault();
        e.stopPropagation();
      }
    }
    function handleCarouselRelease(e) {
      if (this.pressed) {
        this.pressed = false;
      } else {
        return;
      }
      this.beforeChangeTrigger = false;
      var onSwipe = this.props.onSwipe;
      onSwipe(this.scrollType.direction);
      clearInterval(this.ticker);
      this.target = this.offset;
      if (this.velocity > 10 || this.velocity < -10) {
        this.amplitude = 0.9 * this.velocity;
        this.target = this.offset + this.amplitude;
      }
      this.target = Math.round(this.target / this.dim) * this.dim;
      if (this.noWrap) {
        if (this.target >= this.dim * (this.items.length - 1)) {
          this.target = this.dim * (this.items.length - 1);
        } else if (this.target < 0) {
          this.target = 0;
        }
      }
      this.amplitude = this.target - this.offset;
      this.timestamp = Date.now();
      requestAnimationFrame(this.autoScroll);
      if (this.dragged) {
        e.preventDefault();
        e.stopPropagation();
      }
    }
    function handleResizeHeight(mutations) {
      var _this = this;
      var height = this.state.height;
      var mutation = mutations[mutations.length - 1];
      var offsetHeight = mutation.target.offsetHeight;
      if (height !== offsetHeight && offsetHeight > 0 && this.isMounted) {
        this.setState({
          height: offsetHeight
        }, function() {
          _this.resizeHeight = true;
        });
      }
    }
    function handleClick() {
      this.disconnectObserver();
    }
    function handleAutoplayPause() {
      var SliderRef = this.state.SliderRef;
      if (this.autoplayTimer) {
        clearInterval(this.autoplayTimer);
        this.autoplayTimer = null;
        SliderRef.removeEventListener("mouseover", this.handleAutoplayPause);
        SliderRef.addEventListener("mouseleave", this.autoPlay);
      }
    }
    function handleKeyDown(e) {
      var _this$state$settings = this.state.settings, rtl = _this$state$settings.rtl, accessibility = _this$state$settings.accessibility;
      var dir = (0, _utils.keyHandler)(e, accessibility, rtl);
      if (dir === "previous") {
        this.slickPrev();
      } else if (dir === "next") {
        this.slickNext();
      }
    }
    function handleResize(e) {
      this.slideInit();
      this.connectObserver();
      var settings = this.state.settings;
      var onResize = settings.onResize;
      if (settings.fullWidth) {
        var width = this.state.width;
        this.dim = width * 2 + settings.gutter;
        this.offset = this.center * 2 * width;
        this.target = this.offset;
      } else {
        this.scroll("resize");
      }
      onResize(e);
    }
    function handleWheel(e) {
      e.stopPropagation();
      e.preventDefault();
      this.beforeChangeTrigger = false;
      var _this$state = this.state, wheelScroll = _this$state.settings.wheelScroll, activeIndex = _this$state.activeIndex;
      var deltaY = e.deltaY;
      if (deltaY > 0) {
        this.scrollType = {
          type: "wheel",
          direction: "next"
        };
        this.slickNext(activeIndex + wheelScroll);
      } else if (deltaY < 0) {
        this.scrollType = {
          type: "wheel",
          direction: "prev"
        };
        this.slickPrev(activeIndex - wheelScroll);
      }
    }
    function handleVisibilityChange() {
      this.changeWindow = typeof document !== "undefined" && document.visibilityState === "visible";
    }
    function signupListener() {
      var _this$state2 = this.state, settings = _this$state2.settings, SliderRef = _this$state2.SliderRef;
      var swipe = settings.swipe, accessibility = settings.accessibility, wheel = settings.wheel;
      if (swipe) {
        SliderRef.addEventListener("touchstart", this.handleCarouselTap);
        SliderRef.addEventListener("touchmove", this.handleCarouselDrag);
        SliderRef.addEventListener("touchend", this.handleCarouselRelease);
      } else {
        SliderRef.removeEventListener("touchstart", this.handleCarouselTap);
        SliderRef.removeEventListener("touchmove", this.handleCarouselDrag);
        SliderRef.removeEventListener("touchend", this.handleCarouselRelease);
      }
      if (accessibility) {
        SliderRef.addEventListener("keydown", this.handleKeyDown);
      } else {
        SliderRef.removeEventListener("keydown", this.handleKeyDown);
      }
      if (wheel) {
        SliderRef.addEventListener("wheel", this.handleWheel);
      } else {
        SliderRef.removeEventListener("wheel", this.handleWheel);
      }
      SliderRef.addEventListener("mousedown", this.handleCarouselTap);
      SliderRef.addEventListener("mousemove", this.handleCarouselDrag);
      SliderRef.addEventListener("mouseup", this.handleCarouselRelease);
      SliderRef.addEventListener("mouseleave", this.handleCarouselRelease);
    }
    function removeListener() {
      var _this$state3 = this.state, settings = _this$state3.settings, SliderRef = _this$state3.SliderRef;
      var swipe = settings.swipe, accessibility = settings.accessibility, wheel = settings.wheel, autoplay = settings.autoplay;
      if (swipe) {
        SliderRef.removeEventListener("touchstart", this.handleCarouselTap);
        SliderRef.removeEventListener("touchmove", this.handleCarouselDrag);
        SliderRef.removeEventListener("touchend", this.handleCarouselRelease);
      }
      if (accessibility) {
        SliderRef.removeEventListener("keydown", this.handleKeyDown);
      }
      if (wheel) {
        SliderRef.removeEventListener("wheel", this.handleWheel);
      }
      if (autoplay) {
        window.removeEventListener("visibilitychange", this.handleVisibilityChange);
      }
      SliderRef.removeEventListener("mousedown", this.handleCarouselTap);
      SliderRef.removeEventListener("mousemove", this.handleCarouselDrag);
      SliderRef.removeEventListener("mouseup", this.handleCarouselRelease);
      SliderRef.removeEventListener("mouseleave", this.handleCarouselRelease);
    }
  }
});

// vite:dep-pre-bundle:external-conversion:E:/project/a/client/node_modules/infinite-react-carousel/lib/carousel/style.css
var style_exports = {};
import "E:/project/a/client/node_modules/infinite-react-carousel/lib/carousel/style.css";
var init_style = __esm({
  "vite:dep-pre-bundle:external-conversion:E:/project/a/client/node_modules/infinite-react-carousel/lib/carousel/style.css"() {
  }
});

// node_modules/infinite-react-carousel/lib/carousel/slider.js
var require_slider = __commonJS({
  "node_modules/infinite-react-carousel/lib/carousel/slider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _throttle = _interopRequireDefault(require_throttle());
    var _each = _interopRequireDefault(require_each());
    var _get = _interopRequireDefault(require_get());
    var _isEqual = _interopRequireDefault(require_isEqual());
    var _classnames = _interopRequireDefault(require_classnames());
    var _resizeObserverPolyfill = _interopRequireDefault((init_ResizeObserver_es(), __toCommonJS(ResizeObserver_es_exports)));
    var _array = _interopRequireDefault(require_array());
    var _types = require_types();
    var _arrows = require_arrows();
    var _dots = _interopRequireDefault(require_dots());
    var _listener = require_listener();
    init_style();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function")
        return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    function _iterableToArrayLimit(arr, i) {
      if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
        return;
      }
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self2);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var extractObject = function extractObject2(spec, keys) {
      var newObject = {};
      for (var i = 0; i < keys.length; i += 1) {
        var key = keys[i];
        newObject[key] = spec[key];
      }
      return newObject;
    };
    var Slider = function(_Component) {
      _inherits(Slider2, _Component);
      function Slider2(props) {
        var _this;
        _classCallCheck(this, Slider2);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(Slider2).call(this, props));
        _defineProperty(_assertThisInitialized(_this), "isMounted", true);
        _defineProperty(_assertThisInitialized(_this), "init", function() {
          var _this$state = _this.state, settings = _this$state.settings, width = _this$state.width;
          var activeIndex = _this.state.activeIndex;
          settings = _objectSpread({}, _types.defaultProps, {}, _this.props);
          if (settings.fade) {
            if (settings.slidesToShow > 1 && true) {
              console.warn("slidesToShow should be equal to 1 when fade is true, you're using ".concat(settings.slidesToShow));
            }
            settings.slidesToShow = 1;
          }
          var children = _this.props.children;
          children = _react["default"].Children.toArray(children).filter(function(child) {
            return typeof child === "string" ? !!child.trim() : !!child;
          });
          var newWith = _this.widthInit();
          if (width !== newWith) {
            width = newWith;
          }
          var newChildren = [];
          for (var i = 0; i < children.length; i += settings.rows * settings.slidesPerRow) {
            var newSlide = [];
            for (var j = i; j < i + settings.rows * settings.slidesPerRow; j += settings.slidesPerRow) {
              var row = [];
              for (var k = j; k < j + settings.slidesPerRow; k += 1) {
                if (k < children.length) {
                  row.push(_react["default"].cloneElement(children[k], {
                    key: 100 * i + 10 * j + k,
                    tabIndex: -1,
                    style: {
                      width: "".concat(100 / settings.slidesPerRow, "%"),
                      display: "inline-block"
                    }
                  }));
                }
              }
              newSlide.push(_react["default"].createElement("div", {
                className: "carousel-row",
                key: 10 * i + j
              }, row));
            }
            newChildren.push(_react["default"].createElement("div", {
              "data-carouselkey": i,
              key: i,
              className: "carousel-item",
              style: {
                width: "".concat(width, "px"),
                display: "none"
              }
            }, newSlide));
          }
          if (_this.newChildren.length !== newChildren.length) {
            _this.rerender = true;
            _this.newChildren = newChildren;
          } else {
            _this.rerender = false;
            _this.newChildren = newChildren;
            _this.virtualList = newChildren;
          }
          if (settings.virtualList && _this.items && _this.items.length === _this.newChildren.length && !_this.rerender) {
            if (_this.endIndex === activeIndex) {
              _this.endIndex = null;
            }
            _this.virtualList = _this.createVirtualList();
            _this.forceUpdate(function() {
              if (!_this.resizeHeight) {
                _this.connectObserver();
              }
            });
          }
          if (!(0, _isEqual["default"])((0, _get["default"])(_this.state, "settings"), settings) && _this.isMounted) {
            _this.setState({
              settings
            });
          }
        });
        _defineProperty(_assertThisInitialized(_this), "setRef", function(element) {
          return _this.setState({
            SliderRef: element
          }, function() {
            var slides = element.querySelectorAll(".carousel-item");
            var virtualList = _this.state.settings.virtualList;
            if (virtualList) {
              _this.virtualList = _this.newChildren;
              _this.forceUpdate(function() {
                _this.items = new _array["default"](element.querySelectorAll(".carousel-item"));
                _this.virtualItem = null;
              });
            } else {
              _this.items = new _array["default"](slides);
            }
            _this.slideInit();
            var settings = _this.state.settings;
            var slidesToShow = settings.slidesToShow;
            if (slidesToShow < slides.length) {
              _this.signupListener();
              _this.autoPlay();
            } else {
              _this.removeListener();
            }
            element.addEventListener("click", _this.handleClick);
          });
        });
        _defineProperty(_assertThisInitialized(_this), "autoPlay", function() {
          var _this$state2 = _this.state, SliderRef = _this$state2.SliderRef, _this$state2$settings = _this$state2.settings, autoplay = _this$state2$settings.autoplay, autoplaySpeed = _this$state2$settings.autoplaySpeed, pauseOnHover = _this$state2$settings.pauseOnHover;
          if (autoplay && autoplaySpeed > 0 && !_this.autoplayTimer) {
            _this.scrollType = {
              type: "autoplay"
            };
            _this.autoplayTimer = setInterval(function() {
              var autoplayScroll = _this.props.autoplayScroll;
              var activeIndex = _this.state.activeIndex;
              _this.beforeChangeTrigger = false;
              _this.slickNext(activeIndex + autoplayScroll);
            }, autoplaySpeed);
            window.addEventListener("visibilitychange", _this.handleVisibilityChange);
            if (pauseOnHover) {
              SliderRef.addEventListener("mouseover", _this.handleAutoplayPause);
              SliderRef.removeEventListener("mouseleave", _this.autoPlay);
            } else {
              SliderRef.removeEventListener("mouseover", _this.handleAutoplayPause);
              SliderRef.removeEventListener("mouseleave", _this.autoPlay);
            }
          } else if (autoplay && autoplaySpeed && _this.autoplayTimer) {
            _this.autoPlayInit();
            if (!pauseOnHover) {
              SliderRef.removeEventListener("mouseover", _this.handleAutoplayPause);
              SliderRef.removeEventListener("mouseleave", _this.autoPlay);
            }
          }
        });
        _defineProperty(_assertThisInitialized(_this), "autoPlayInit", function() {
          var settings = _this.state.settings;
          if (settings.autoplay) {
            _this.handleAutoplayPause();
            _this.autoPlay();
          } else if (_this.isMounted) {
            _this.setState({
              settings: _objectSpread({}, settings, {
                autoplay: true
              })
            }, function() {
              _this.handleAutoplayPause();
              _this.autoPlay();
            });
          }
        });
        _defineProperty(_assertThisInitialized(_this), "connectObserver", function() {
          if (!_this.resizeObserver) {
            var SliderRef = _this.state.SliderRef;
            _this.resizeObserver = new _resizeObserverPolyfill["default"](_this.handleResizeHeight);
            _this.resizeObserver.observe(SliderRef.querySelector(".carousel-item"));
          } else {
            _this.disconnectObserver();
            _this.connectObserver();
          }
        });
        _defineProperty(_assertThisInitialized(_this), "disconnectObserver", function() {
          if (_this.resizeObserver) {
            _this.resizeObserver.disconnect();
            _this.resizeObserver = null;
          }
        });
        _defineProperty(_assertThisInitialized(_this), "track", function() {
          var now = Date.now();
          var elapsed = now - _this.timestamp;
          _this.timestamp = now;
          var delta = _this.offset - _this.frame;
          _this.frame = _this.offset;
          var v = 1e3 * delta / (1 + elapsed);
          _this.velocity = 0.8 * v + 0.2 * _this.velocity;
        });
        _defineProperty(_assertThisInitialized(_this), "autoScroll", function(type) {
          var settings = _this.state.settings;
          if (_this.amplitude) {
            var elapsed = Date.now() - _this.timestamp;
            var delta = _this.amplitude * Math.exp(-elapsed / settings.duration);
            if (_this.doubleTrigger) {
              _this.beforeChangeTrigger = false;
              _this.scroll("auto", _this.target - delta);
              requestAnimationFrame(_this.autoScroll);
              _this.doubleTrigger = false;
            } else if (delta > 2 || delta < -2) {
              _this.scroll(type === "start" ? type : "auto", _this.target - delta);
              requestAnimationFrame(_this.autoScroll);
            } else if (_this.changeWindow) {
              _this.changeWindow = false;
              _this.scroll("auto", _this.target);
            } else {
              _this.scroll("end", _this.target);
            }
          }
        });
        _defineProperty(_assertThisInitialized(_this), "getItem", function(scrollItem, index2) {
          var virtualList = _this.state.settings.virtualList;
          var el;
          if (virtualList) {
            var keyIndex = scrollItem.getKeyIndex(index2);
            if (keyIndex >= 0) {
              el = scrollItem.get(keyIndex);
            }
          } else {
            el = scrollItem.get(index2);
          }
          return el;
        });
        _defineProperty(_assertThisInitialized(_this), "scroll", function(type, x) {
          var _this$state3 = _this.state, SliderRef = _this$state3.SliderRef, width = _this$state3.width, settings = _this$state3.settings, activeIndex = _this$state3.activeIndex;
          var centerMode = settings.centerMode, beforeChange = settings.beforeChange, afterChange = settings.afterChange, slidesToShow = settings.slidesToShow, virtualList = settings.virtualList;
          var i;
          var el;
          var alignment = "translateX(0px)";
          if (!x) {
            _this.offset = width * activeIndex * 2;
          } else {
            _this.offset = typeof x === "number" ? x : _this.offset;
          }
          _this.center = Math.floor((_this.offset + _this.dim / 2) / _this.dim);
          var delta = _this.offset - _this.center * _this.dim;
          var dir = delta < 0 ? 1 : -1;
          var tween = -dir * delta * 2 / _this.dim;
          if (centerMode) {
            if (slidesToShow % 2 === 0) {
              alignment = "translateX(".concat(width * (slidesToShow / 2), "px)");
            } else {
              alignment = "translateX(".concat((SliderRef.clientWidth - width) / 2 - settings.centerPadding, "px)");
            }
          } else {
            alignment = "translateX(0px)";
          }
          var _this$scrollType = _this.scrollType, scrollType = _this$scrollType.type, direction = _this$scrollType.direction;
          if (!SliderRef.classList.contains("scrolling") && scrollType !== "arrows" && type !== "init" && type !== "resize") {
            _this.swiping = true;
            SliderRef.classList.add("scrolling");
          }
          var index2 = _this.wrap(_this.center);
          if (!_this.beforeChangeTrigger && type !== "start" && type !== "end" && type !== "init") {
            _this.beforeChangeTrigger = true;
            var newIndex;
            switch (scrollType) {
              case "arrows": {
                var slides = settings.arrowsScroll;
                _this.scrollDistance = slides;
                newIndex = _this.items.getIndex(direction === "prev" ? activeIndex - slides : activeIndex + slides);
                break;
              }
              case "dots": {
                newIndex = _this.scrollOptions.index * _this.scrollOptions.dotsScroll;
                break;
              }
              case "autoplay": {
                var _slides = settings.autoplayScroll;
                _this.scrollDistance = _slides;
                newIndex = _this.items.getIndex(activeIndex + _slides);
                break;
              }
              case "wheel": {
                var _slides2 = settings.wheelScroll;
                _this.scrollDistance = _slides2;
                newIndex = _this.items.getIndex(direction === "prev" ? activeIndex - _slides2 : activeIndex + _slides2);
                break;
              }
              default:
                break;
            }
            _this.endIndex = newIndex;
            if (beforeChange && typeof beforeChange === "function") {
              beforeChange(activeIndex, newIndex);
            }
          }
          if (type !== "end" && _this.scrollEnd)
            _this.scrollEnd = false;
          if (type === "end") {
            if (afterChange && typeof afterChange === "function" && !_this.scrollEnd) {
              afterChange(_this.wrap(_this.center));
            }
            _this.scrollEnd = true;
            SliderRef.classList.remove("scrolling");
            _this.beforeChangeTrigger = false;
            _this.swiping = false;
          } else if (_this.scrollEnd) {
            _this.scrollEnd(true);
          }
          _this.virtualItem = _this.virtualItem || new _array["default"](SliderRef.querySelectorAll(".carousel-item"), _this.items);
          var scrollItem = virtualList ? _this.virtualItem : _this.items;
          if (scrollItem.length <= slidesToShow) {
            el = _this.getItem(scrollItem, 0);
            if (el) {
              if (el.classList.contains("active")) {
                (0, _each["default"])(SliderRef.querySelectorAll(".carousel-item"), function(ele) {
                  return ele.classList.remove("active");
                });
                el.classList.add("active");
              }
              var transformString = "".concat(alignment, " translateX(0px)");
              _this.updateItemStyle(el, transformString);
            }
          } else if (!_this.noWrap || _this.center >= 0 && _this.center < scrollItem.length) {
            el = _this.getItem(scrollItem, index2);
            if (el) {
              if (el.classList.contains("active")) {
                (0, _each["default"])(SliderRef.querySelectorAll(".carousel-item"), function(ele) {
                  return ele.classList.remove("active");
                });
                el.classList.add("active");
              }
              var _transformString = "".concat(alignment, " translateX(").concat(-delta / 2, "px) translateX(").concat(dir * settings.shift * tween * i, "px)");
              _this.updateItemStyle(el, _transformString);
            }
          }
          if (centerMode) {
            var half = Math.floor(scrollItem.length / 2);
            for (i = 1; i <= half; i += 1) {
              if (!_this.noWrap || _this.center + i < scrollItem.length) {
                el = _this.getItem(scrollItem, _this.wrap(_this.center + i));
                if (el) {
                  var _transformString2 = "".concat(alignment, " translateX(").concat(settings.shift + (_this.dim * i - delta) / 2, "px)");
                  _this.updateItemStyle(el, _transformString2);
                }
              }
              if (!_this.noWrap || _this.center - i >= 0) {
                el = _this.getItem(scrollItem, _this.wrap(_this.center - i));
                if (el) {
                  var _transformString3 = "".concat(alignment, " translateX(").concat(-settings.shift + (-_this.dim * i - delta) / 2, "px)");
                  _this.updateItemStyle(el, _transformString3);
                }
              }
            }
          } else if (scrollItem.length <= slidesToShow) {
            for (i = 1; i < scrollItem.length; i += 1) {
              el = _this.getItem(scrollItem, i);
              if (el) {
                var _transformString4 = "".concat(alignment, " translateX(").concat(settings.shift + (_this.dim * i - delta) / 2, "px)");
                _this.updateItemStyle(el, _transformString4);
              }
            }
          } else {
            for (i = 1; i < slidesToShow; i += 1) {
              el = _this.getItem(scrollItem, _this.wrap(_this.center + i));
              if (el) {
                var _transformString5 = "".concat(alignment, " translateX(").concat(settings.shift + (_this.dim * i - delta) / 2, "px)");
                _this.updateItemStyle(el, _transformString5);
              }
            }
            var _half = Math.ceil((scrollItem.length - slidesToShow) / 2);
            for (i = 0; i < _half; i += 1) {
              if (!_this.noWrap || _this.center + slidesToShow + i < scrollItem.length) {
                el = _this.getItem(scrollItem, _this.wrap(_this.center + slidesToShow + i));
                if (el) {
                  var _transformString6 = "".concat(alignment, " translateX(").concat(settings.shift + (_this.dim * (slidesToShow + i) - delta) / 2, "px)");
                  _this.updateItemStyle(el, _transformString6);
                }
              }
              if (!_this.noWrap || _this.center + slidesToShow + i < scrollItem.length) {
                el = _this.getItem(scrollItem, _this.wrap(_this.center - i - 1));
                if (el) {
                  var _transformString7 = "".concat(alignment, " translateX(").concat(-settings.shift + (-_this.dim * (i + 1) - delta) / 2, "px)");
                  _this.updateItemStyle(el, _transformString7);
                }
              }
            }
          }
          if ((!_this.noWrap || _this.center < _this.items.length) && slidesToShow < scrollItem.length) {
            el = _this.getItem(scrollItem, _this.center);
            if (el) {
              if (!el.classList.contains("active")) {
                (0, _each["default"])(SliderRef.querySelectorAll(".carousel-item"), function(ele) {
                  return ele.classList.remove("active");
                });
                el.classList.add("active");
                var newActiveIndex = _this.wrap(_this.center);
                if (_this.beforeChangeTrigger && _this.isMounted) {
                  _this.setState({
                    activeIndex: newActiveIndex
                  }, function() {
                    _this.virtualItem = null;
                  });
                }
              }
              var _transformString8 = "".concat(alignment, " translateX(").concat(-delta / 2, "px) translateX(").concat(dir * settings.shift * tween, "px)");
              _this.updateItemStyle(el, _transformString8);
            }
          }
          _this.adaptHeight();
          var currItem = SliderRef.querySelectorAll(".carousel-item")[_this.wrap(_this.center)];
          if (typeof _this.oneTimeCallback === "function") {
            _this.oneTimeCallback.call(_assertThisInitialized(_this), currItem, _this.dragged);
            _this.oneTimeCallback = null;
          }
        });
        _defineProperty(_assertThisInitialized(_this), "updateItemStyle", function(el, transform) {
          var newEl = el;
          newEl.style[_this.xform] = transform;
          newEl.style.zIndex = 1;
          newEl.style.display = "";
        });
        _defineProperty(_assertThisInitialized(_this), "widthInit", function() {
          var _this$state4 = _this.state, settings = _this$state4.settings, SliderRef = _this$state4.SliderRef;
          var centerMode = settings.centerMode, centerPadding = settings.centerPadding, slidesToShow = settings.slidesToShow;
          if (SliderRef) {
            var padding = 0;
            if (typeof centerPadding === "string") {
              var _centerPadding$match = centerPadding.match(/\d+/g);
              var _centerPadding$match2 = _slicedToArray(_centerPadding$match, 1);
              padding = _centerPadding$match2[0];
            } else if (typeof centerPadding === "number") {
              padding = centerPadding;
            } else {
              padding = 50;
              console.warn("centerPadding have to be number or string like 50px");
            }
            var offsetWidth = SliderRef.offsetWidth;
            if (offsetWidth <= 0) {
              offsetWidth = window.innerWidth;
            }
            var sliderWidth = centerMode ? offsetWidth - padding * 2 : offsetWidth;
            var width = sliderWidth / slidesToShow;
            return width;
          }
          return 0;
        });
        _defineProperty(_assertThisInitialized(_this), "slideInit", function() {
          var _this$state5 = _this.state, SliderRef = _this$state5.SliderRef, initialSlide = _this$state5.settings.initialSlide;
          if (SliderRef && _this.isMounted) {
            var width = _this.widthInit();
            _this.setState({
              width
            }, function() {
              _this.dim = width * 2;
              _this.scroll("init");
              if (initialSlide) {
                if (typeof initialSlide === "number") {
                  if (initialSlide > 0 && !_this.initialSet) {
                    _this.slickSet(initialSlide);
                    _this.initialSet = true;
                  }
                } else {
                  _this.slickSet(0);
                  _this.initialSet = false;
                  console.warn("initialSlide must be a number");
                }
              }
              _this.connectObserver();
            });
          }
        });
        _defineProperty(_assertThisInitialized(_this), "adaptHeight", function() {
          var _this$state6 = _this.state, settings = _this$state6.settings, SliderRef = _this$state6.SliderRef, height = _this$state6.height;
          if (settings.adaptiveHeight && SliderRef) {
            var index2 = _this.wrap(_this.center);
            var elem = _this.items.get(index2);
            var offsetHeight = elem.offsetHeight;
            if (height !== offsetHeight && offsetHeight > 0 && _this.isMounted) {
              _this.setState({
                height: offsetHeight
              });
            }
          }
        });
        _defineProperty(_assertThisInitialized(_this), "xpos", function(e) {
          if (e.targetTouches && e.targetTouches.length >= 1) {
            return e.targetTouches[0].clientX;
          }
          return e.clientX;
        });
        _defineProperty(_assertThisInitialized(_this), "ypos", function(e) {
          if (e.targetTouches && e.targetTouches.length >= 1) {
            return e.targetTouches[0].clientY;
          }
          return e.clientY;
        });
        _defineProperty(_assertThisInitialized(_this), "wrap", function(x) {
          return _this.items.getIndex(x);
        });
        _defineProperty(_assertThisInitialized(_this), "cycleTo", function(n, callback) {
          var diff = _this.center % _this.items.length - n;
          if (!_this.noWrap) {
            if (diff < 0) {
              if (Math.abs(diff + _this.items.length) < Math.abs(diff)) {
                diff += _this.items.length;
              }
            } else if (diff > 0) {
              if (Math.abs(diff - _this.items.length) < diff) {
                diff -= _this.items.length;
              }
            }
          }
          _this.target = _this.dim * Math.round(_this.offset / _this.dim);
          if (diff < 0) {
            _this.target += _this.dim * Math.abs(diff);
          } else if (diff > 0) {
            _this.target -= _this.dim * diff;
          }
          if (typeof callback === "function") {
            _this.oneTimeCallback = callback;
          }
          if (_this.offset !== _this.target) {
            _this.amplitude = _this.target - _this.offset;
            _this.timestamp = Date.now();
            requestAnimationFrame(function() {
              _this.autoScroll("start");
            });
          }
        });
        _defineProperty(_assertThisInitialized(_this), "slickNext", function(n) {
          if (_this.scrollType.type === "arrows") {
            _this.doubleTrigger = true;
          }
          if (typeof n === "number") {
            _this.cycleTo(n);
          } else {
            var activeIndex = _this.state.activeIndex;
            _this.cycleTo(activeIndex + 1);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "slickPrev", function(n) {
          if (_this.scrollType.type === "arrows") {
            _this.doubleTrigger = true;
          }
          if (typeof n === "number") {
            _this.cycleTo(n);
          } else {
            var activeIndex = _this.state.activeIndex;
            _this.cycleTo(activeIndex - 1);
          }
        });
        _defineProperty(_assertThisInitialized(_this), "slickSet", function(n, callback) {
          return _this.cycleTo(n, callback);
        });
        _defineProperty(_assertThisInitialized(_this), "createVirtualList", function() {
          var _this$state7 = _this.state, _this$state7$settings = _this$state7.settings, slidesToShow = _this$state7$settings.slidesToShow, overScan = _this$state7$settings.overScan, activeIndex = _this$state7.activeIndex;
          if (_this.virtualList.length > (slidesToShow + overScan) * 2 + 1) {
            var result = [];
            var getIndex = [];
            var newActiveIndex = activeIndex;
            var _this$scrollType2 = _this.scrollType, type = _this$scrollType2.type, direction = _this$scrollType2.direction;
            switch (type) {
              case "scroll": {
                if (direction === "left")
                  newActiveIndex += 1;
                else
                  newActiveIndex -= 1;
                break;
              }
              case "arrows": {
                if (direction === "next")
                  newActiveIndex += 1;
                else
                  newActiveIndex -= 1;
                break;
              }
              case "dots": {
                if (direction === "right")
                  newActiveIndex += 1;
                else
                  newActiveIndex -= 1;
                break;
              }
              case "wheel": {
                if (direction === "next")
                  newActiveIndex += 1;
                else
                  newActiveIndex -= 1;
                break;
              }
              case "autoplay": {
                newActiveIndex += 1;
                break;
              }
              default:
                break;
            }
            var i = 0;
            for (; i < slidesToShow + overScan; i += 1) {
              if (i === 0) {
                var index2 = _this.items.getIndex(newActiveIndex);
                getIndex.push(index2);
              } else {
                var rightIndex = _this.items.getIndex(newActiveIndex + i);
                var leftIndex = _this.items.getIndex(newActiveIndex - i);
                getIndex.push(rightIndex);
                getIndex.unshift(leftIndex);
              }
            }
            if (_this.endIndex >= 0 && typeof _this.endIndex === "number") {
              var buffer = 0;
              if (activeIndex + _this.endIndex < _this.newChildren.length + _this.scrollDistance && activeIndex + _this.endIndex >= _this.newChildren.length - _this.scrollDistance && (activeIndex >= _this.newChildren.length - _this.scrollDistance || _this.endIndex >= _this.newChildren.length - _this.scrollDistance)) {
                if (_this.endIndex + activeIndex < _this.newChildren.length) {
                  if (_this.endIndex < activeIndex) {
                    buffer = _this.newChildren.length - activeIndex + _this.endIndex;
                  } else {
                    buffer = _this.newChildren.length - _this.endIndex + activeIndex;
                  }
                } else if (_this.endIndex < activeIndex) {
                  buffer = _this.newChildren.length + _this.scrollDistance - activeIndex + _this.endIndex;
                } else {
                  buffer = _this.newChildren.length + _this.scrollDistance - _this.endIndex + activeIndex;
                }
              } else {
                buffer = _this.endIndex < activeIndex ? activeIndex - _this.endIndex : _this.endIndex - activeIndex;
              }
              for (var j = 0; j < buffer; j += 1) {
                var _rightIndex = _this.items.getIndex(newActiveIndex + i + j);
                var _leftIndex = _this.items.getIndex(newActiveIndex - i - j);
                switch (type) {
                  case "arrows": {
                    if (direction === "next")
                      getIndex.push(_rightIndex);
                    else
                      getIndex.unshift(_leftIndex);
                    break;
                  }
                  case "dots": {
                    if (direction === "right")
                      getIndex.push(_rightIndex);
                    else
                      getIndex.unshift(_leftIndex);
                    break;
                  }
                  case "wheel": {
                    if (direction === "next")
                      getIndex.push(_rightIndex);
                    else
                      getIndex.unshift(_leftIndex);
                    break;
                  }
                  case "autoplay": {
                    getIndex.push(_rightIndex);
                    break;
                  }
                  default:
                    break;
                }
              }
            }
            getIndex.sort(function(a, b) {
              return a - b;
            });
            for (i = 0; i < getIndex.length; i += 1) {
              var childrenIndex = getIndex[i];
              var children = _this.newChildren[childrenIndex];
              result.push(children);
            }
            return result;
          }
          return _this.virtualList;
        });
        _this.state = {
          SliderRef: null,
          width: 0,
          height: 0,
          autoplaying: null,
          settings: _types.defaultProps,
          activeIndex: 0
        };
        _this.touchObject = {};
        _this.newChildren = [];
        _this.virtualList = [];
        _this.center = 0;
        _this.offset = 0;
        _this.target = 0;
        _this.items = null;
        _this.virtualItem = null;
        _this.dim = 1;
        _this.xform = "";
        _this.resizeObserver = null;
        _this.autoplayTimer = null;
        ["", "Webkit", "Moz", "O", "ms"].every(function(prefix) {
          var e = "".concat(prefix, "Transform");
          if (typeof document !== "undefined" && typeof document.body.style[e] !== "undefined") {
            _this.xform = e;
            return false;
          }
          return true;
        });
        _this.doubleTrigger = false;
        _this.initialSet = false;
        _this.beforeChangeTrigger = false;
        _this.scrollEnd = false;
        _this.autoplayTimer = null;
        _this.scrollType = {};
        _this.scrollOptions = {};
        _this.rerender = false;
        _this.resizeHeight = false;
        _this.endIndex = null;
        _this.changeWindow = false;
        _this.scroll = _this.scroll.bind(_assertThisInitialized(_this));
        _this.setRef = _this.setRef.bind(_assertThisInitialized(_this));
        _this.slideInit = _this.slideInit.bind(_assertThisInitialized(_this));
        _this.slickNext = _this.slickNext.bind(_assertThisInitialized(_this));
        _this.slickPrev = _this.slickPrev.bind(_assertThisInitialized(_this));
        _this.slickSet = _this.slickSet.bind(_assertThisInitialized(_this));
        _this.cycleTo = _this.cycleTo.bind(_assertThisInitialized(_this));
        _this.autoPlay = _this.autoPlay.bind(_assertThisInitialized(_this));
        _this.handleCarouselTap = _listener.handleCarouselTap.bind(_assertThisInitialized(_this));
        _this.signupListener = _listener.signupListener.bind(_assertThisInitialized(_this));
        _this.removeListener = _listener.removeListener.bind(_assertThisInitialized(_this));
        _this.handleCarouselDrag = _listener.handleCarouselDrag.bind(_assertThisInitialized(_this));
        _this.handleCarouselRelease = _listener.handleCarouselRelease.bind(_assertThisInitialized(_this));
        _this.handleAutoplayPause = _listener.handleAutoplayPause.bind(_assertThisInitialized(_this));
        _this.handleResize = (0, _throttle["default"])(_listener.handleResize.bind(_assertThisInitialized(_this)), 1e3, {
          leading: true
        });
        _this.handleResizeHeight = (0, _throttle["default"])(_listener.handleResizeHeight.bind(_assertThisInitialized(_this)), 500);
        _this.handleVisibilityChange = _listener.handleVisibilityChange.bind(_assertThisInitialized(_this));
        _this.handleKeyDown = _listener.handleKeyDown.bind(_assertThisInitialized(_this));
        _this.handleClick = _listener.handleClick.bind(_assertThisInitialized(_this));
        _this.handleWheel = _listener.handleWheel.bind(_assertThisInitialized(_this));
        return _this;
      }
      _createClass(Slider2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.isMounted = true;
          window.addEventListener("resize", this.handleResize);
          this.init();
          var onInit = this.props.onInit;
          if (onInit && typeof onInit === "function")
            onInit(this);
        }
      }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          this.init();
          var slidesPerRow = nextProps.slidesPerRow, rows = nextProps.rows;
          var _this$state$settings = this.state.settings, originPerRow = _this$state$settings.slidesPerRow, originRows = _this$state$settings.rows;
          if (slidesPerRow !== originPerRow || rows !== originRows) {
            this.resizeHeight = false;
          }
          return (0, _isEqual["default"])(nextProps, this.props) || (0, _isEqual["default"])(nextState, this.state);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var SliderRef = this.state.SliderRef;
          var newProps = _objectSpread({}, this.props, {
            children: []
          });
          var newPrevProps = _objectSpread({}, prevProps, {
            children: []
          });
          var children = this.props.children;
          if (!(0, _isEqual["default"])(newProps, newPrevProps) || prevProps.children.length !== children.length) {
            var onReInit = this.props.onReInit;
            this.init();
            this.setRef(SliderRef);
            if (onReInit && typeof onReInit === "function")
              onReInit(this);
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          window.removeEventListener("resize", this.handleResize);
          this.isMounted = false;
        }
        /**
         * settings init
         */
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
          var _this$state8 = this.state, height = _this$state8.height, settings = _this$state8.settings, activeIndex = _this$state8.activeIndex;
          var spec = _objectSpread({}, settings, {}, this.prop);
          var centerPadding = settings.centerPadding, centerMode = settings.centerMode;
          var padding = typeof centerPadding === "string" ? centerPadding : "".concat(centerPadding, "px");
          var arrowProps = extractObject(spec, ["arrows", "arrowsScroll", "centerMode", "currentSlide", "slideCount", "slidesToShow", "prevArrow", "nextArrow", "arrowsBlock"]);
          var prevArrow;
          var nextArrow;
          if (settings.arrows) {
            prevArrow = _react["default"].createElement(_arrows.PrevArrow, _extends({}, arrowProps, {
              clickHandler: function clickHandler(options) {
                _this2.beforeChangeTrigger = false;
                _this2.scrollType = {
                  type: "arrows",
                  direction: "prev"
                };
                _this2.scrollOptions = options;
                _this2.slickPrev(activeIndex - options.arrowsScroll);
              }
            }));
            nextArrow = _react["default"].createElement(_arrows.NextArrow, _extends({}, arrowProps, {
              clickHandler: function clickHandler(options) {
                _this2.beforeChangeTrigger = false;
                _this2.scrollType = {
                  type: "arrows",
                  direction: "next"
                };
                _this2.scrollOptions = options;
                _this2.slickNext(activeIndex + options.arrowsScroll);
              }
            }));
          }
          var dots;
          if (settings.dots === true && this.items) {
            if (this.items.length >= settings.slidesToShow) {
              var dotProps = extractObject(spec, ["dotsClass", "slidesToShow", "dotsScroll", "clickHandler", "children", "customPaging", "infinite", "appendDots"]);
              var pauseOnDotsHover = settings.pauseOnDotsHover;
              Object.assign(dotProps, {
                activeIndex,
                slideCount: this.items.length,
                clickHandler: function clickHandler(options) {
                  _this2.beforeChangeTrigger = false;
                  var right = 0;
                  var left = 0;
                  var direction = null;
                  if (activeIndex > options.index) {
                    right = _this2.newChildren.length - activeIndex + options.index;
                    left = activeIndex - options.index;
                    direction = right < left ? "right" : "left";
                  } else {
                    right = options.index - activeIndex;
                    left = _this2.newChildren.length - options.index + activeIndex;
                    direction = right <= left ? "right" : "left";
                  }
                  _this2.scrollType = {
                    type: "dots",
                    direction
                  };
                  _this2.scrollOptions = options;
                  _this2.slickSet(options.index * options.dotsScroll);
                },
                onMouseEnter: pauseOnDotsHover ? this.onDotsLeave : null,
                onMouseOver: pauseOnDotsHover ? this.onDotsOver : null,
                onMouseLeave: pauseOnDotsHover ? this.onDotsLeave : null
              });
              dots = _react["default"].createElement(_dots["default"], dotProps);
            }
          }
          var judge = this.items ? settings.slidesToShow < this.items.length : false;
          var component = _react["default"].createElement(_react.Fragment, null, _react["default"].createElement("div", {
            ref: function ref(e) {
              var SliderRef = _this2.state.SliderRef;
              if (!SliderRef && _this2.isMounted) {
                _this2.setRef(e);
              }
            },
            className: "carousel-initialized",
            style: {
              padding: centerMode ? "0 ".concat(padding) : 0
            }
          }, !settings.unslick && judge ? prevArrow : "", _react["default"].createElement("div", {
            style: {
              height: "".concat(height, "px")
            },
            className: "carousel-track"
          }, this.rerender ? this.newChildren : this.virtualList), !settings.unslick && judge ? nextArrow : ""), !settings.unslick && judge ? dots : "");
          if (settings === "unslick") {
            var className = "regular slider ".concat(settings.className || "");
            component = _react["default"].createElement("div", {
              className
            }, this.newChildren);
          }
          return _react["default"].createElement("div", {
            className: (0, _classnames["default"])(settings.className)
          }, component);
        }
      }]);
      return Slider2;
    }(_react.Component);
    Slider.propTypes = _types.propTypes;
    Slider.defaultProps = _types.defaultProps;
    var _default = Slider;
    exports["default"] = _default;
  }
});

// node_modules/infinite-react-carousel/lib/carousel/index.js
var require_carousel = __commonJS({
  "node_modules/infinite-react-carousel/lib/carousel/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _slider = _interopRequireDefault(require_slider());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function")
        return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self2);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var Carousel = function(_Component) {
      _inherits(Carousel2, _Component);
      function Carousel2() {
        var _getPrototypeOf2;
        var _this;
        _classCallCheck(this, Carousel2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Carousel2)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _defineProperty(_assertThisInitialized(_this), "slickNext", function() {
          return _this.innerSlider.slickNext();
        });
        _defineProperty(_assertThisInitialized(_this), "slickPrev", function() {
          return _this.innerSlider.slickPrev();
        });
        _defineProperty(_assertThisInitialized(_this), "slickPlay", function() {
          return _this.innerSlider.autoPlayInit();
        });
        _defineProperty(_assertThisInitialized(_this), "slickPause", function() {
          return _this.innerSlider.handleAutoplayPause();
        });
        _defineProperty(_assertThisInitialized(_this), "slickGoTo", function(n) {
          return _this.innerSlider.slickSet(n);
        });
        return _this;
      }
      _createClass(Carousel2, [{
        key: "render",
        value: function render() {
          var _this2 = this;
          var children = this.props.children;
          return _react["default"].createElement(_slider["default"], _extends({}, this.props, {
            ref: function ref(slider) {
              _this2.innerSlider = slider;
            }
          }), children);
        }
      }]);
      return Carousel2;
    }(_react.Component);
    Carousel.propTypes = {
      children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].element), _propTypes["default"].arrayOf(_propTypes["default"].instanceOf(typeof Element !== "undefined" && Element)), _propTypes["default"].func, _propTypes["default"].oneOf([null])]).isRequired
    };
    var _default = Carousel;
    exports["default"] = _default;
  }
});

// node_modules/infinite-react-carousel/lib/index.js
var require_lib = __commonJS({
  "node_modules/infinite-react-carousel/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Slider", {
      enumerable: true,
      get: function get() {
        return _slider["default"];
      }
    });
    exports["default"] = void 0;
    var _carousel = _interopRequireDefault(require_carousel());
    var _slider = _interopRequireDefault(require_slider());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _default = _carousel["default"];
    exports["default"] = _default;
  }
});

export {
  require_lib
};
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=chunk-VN2JCHVK.js.map
